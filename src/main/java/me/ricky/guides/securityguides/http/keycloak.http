##################################################################  1. keycloak 토큰 발행 (client_credentials 방식)
### server to server 통신을 위한 토큰 발행
POST {{keycloak-domain}}/realms/security-guide/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

client_id = secapi &
client_secret = ee2DZvaO9FDEuTSXsD0T2VjDK16w8efU &
scope = openid email profile address &
grant_type = client_credentials

> {%
    client.global.set("access_token", response.body.access_token)
%}

################################################################## 2. code 를 이용한 토큰 발행
# 1) user 로그인 요청
# 2) client서버에서 keycloak 서버로 redirect
# 3) keycloak 서버에서 user가 로그인 후 code 발행
# 4) client 서버에서 code를 이용하여 keycloak서버에 토큰 발행
### 1-1. keycloak 서버 사용자가 직접 접속하여 인증 수행
GET {{keycloak-domain}}/realms/security-guide/protocol/openid-connect/auth?
    client_id=spaclient&
    response_type=code&
    scope=openid&
    redirect_uri=http://localhost:7080/sample&
    state=sgdfsgswregd

> {%
    client.log(response.body);
%}

### 1-2. 로그인 성공 후 keycloak 서버로 부터 받은 code를 이용하여, 토큰 발행
POST {{keycloak-domain}}/realms/security-guide/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

client_id = spaclient &
client_secret = VsOD4kis7YswVVj9KEaZEqc42bJl8dIA &
scope = openid email profile address &
code = fb3867a5-1881-4fdd-bd77-24f1405f17a3.9d3ef118-9672-4085-a052-982f626ceab4.cabfc233-8d91-4998-b5a4-5d569a051a84 &
redirect_uri = http://localhost:7080/sample &
grant_type = authorization_code

> {%
    client.global.set("access_token", response.body.access_token)
%}